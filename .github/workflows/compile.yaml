name: ESP-IDF CI/CD

on:
  push:
    branches: [ main, master ]
    tags-ignore: [ '*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  release:
    types: [ created ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build for ${{ matrix.idf_target }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: espressif/idf:release-v5.4
    strategy:
      matrix:
        idf_target: [esp32c3] # Add more targets as needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: rapt-mate/package-lock.json

      - name: Install dependencies
        run: |
          cd rapt-mate
          npm ci
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build project
        run: |
          set -e
          . $IDF_PATH/export.sh
          export SDKCONFIG_DEFAULTS=$(pwd)/sdkconfig.defaults
          idf.py reconfigure set-target ${{ matrix.idf_target }} build

      - name: Create per-target zip
        run: |
          mkdir -p artifacts
          zip -j artifacts/firmware-${{ matrix.idf_target }}.zip \
              build/*.bin \
              build/*.elf \
              build/*.map \
              build/flasher_args.json \
              _site/manifest.json

      - name: Upload per-target artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.idf_target }}
          path: artifacts/firmware-${{ matrix.idf_target }}.zip
          retention-days: 1

  package:
    name: Package all firmware
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
          pattern: firmware-*
          merge-multiple: true

      - name: Show downloaded files (debug)
        run: ls -R downloaded_artifacts

      - name: Create organized firmware structure
        run: |
          mkdir -p combined/firmware
          
          # Process each downloaded zip file
          for target_zip in downloaded_artifacts/firmware-*.zip; do
            echo "Processing $target_zip"
            target_name=$(basename "$target_zip" .zip | sed 's/firmware-//')
            echo "Target name: $target_name"
            mkdir -p "combined/firmware/$target_name"
            unzip -j -o "$target_zip" -d "combined/firmware/$target_name" || echo "Warning: Failed to unzip $target_zip"
          done

          # Verify extraction
          find combined/firmware -type f | xargs -I {} ls -la {}

          # Create README
          echo "# Firmware Release ${{ github.ref_name }}" > combined/README.md
          echo "Generated at $(date -u)" >> combined/README.md
          echo "Contains firmware for: $(ls combined/firmware | tr '\n' ' ')" >> combined/README.md

          # Create final zip
          cd combined
          zip -r ../firmware-release.zip .
          cd ..

      - name: Upload release asset using GH CLI
        run: |
          gh release upload ${{ github.event.release.tag_name }} firmware-release.zip \
            --clobber \
            --repo ${{ github.repository }}

      - name: Verify upload
        run: |
          gh release view ${{ github.event.release.tag_name }} --json assets --jq '.assets[].name'

      - name: Cleanup
        run: rm -rf downloaded_artifacts combined firmware-release.zip

  deploy:
    name: Deploy to GitHub Pages
    needs: [build, package]
    if: github.event_name == 'release' && github.event.action == 'created'
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4