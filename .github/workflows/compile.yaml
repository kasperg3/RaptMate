name: ESP-IDF CI/CD

on:
  push:
    branches: [ main, master ]
    tags-ignore: [ '*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  release:
    types: [ created ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: read
  checks: write
  contents: write
  deployments: write
  id-token: write
  pages: write
  packages: read

jobs:
  build:
    name: Build for ${{ matrix.idf_target }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: espressif/idf:release-v5.4@sha256:abcdef123456...
    strategy:
      matrix:
        idf_target: [esp32c3, esp32]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: rapt-mate/package-lock.json

      - name: Install dependencies
        run: |
          cd rapt-mate
          npm ci
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Build project
        run: |
          set -e
          . $IDF_PATH/export.sh
          export SDKCONFIG_DEFAULTS=$(pwd)/sdkconfig.defaults
          idf.py reconfigure set-target ${{ matrix.idf_target }} build

      - name: Store binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.idf_target }}
          path: |
            build/*.bin
            build/*.elf
            build/*.map
            build/flasher_args.json
            _site/manifest.json

  package:
    name: Package firmware
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create organized firmware zip
        run: |
          mkdir -p combined_artifacts/firmware
          
          for artifact in artifacts/*.zip; do
            target_name=$(basename "$artifact" .zip | sed 's/firmware-//')
            mkdir -p "combined_artifacts/firmware/$target_name"
            unzip -q "$artifact" -d "combined_artifacts/firmware/$target_name"
          done

          cd combined_artifacts
          zip -r firmware-all-targets.zip firmware
          cd ..

      - name: Validate zip structure
        run: |
          unzip -t combined_artifacts/firmware-all-targets.zip
          unzip -l combined_artifacts/firmware-all-targets.zip | grep "firmware/"

      - name: Upload to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: combined_artifacts/firmware-all-targets.zip
          asset_name: firmware-${{ github.run_id }}.zip
          asset_content_type: application/zip

      - name: Cleanup workspace
        if: always()
        run: rm -rf artifacts combined_artifacts

  deploy:
    name: Deploy to GitHub Pages
    needs: [build, package]
    if: github.event_name == 'release' && github.event.action == 'created'
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4