name: ESP-IDF CI/CD

on:
  push:
    branches: [ main, master ]
    tags-ignore: [ '*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  release:
    types: [ created ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build for ${{ matrix.idf_target }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: espressif/idf:release-v5.4
    strategy:
      matrix:
        idf_target: [esp32c3, esp32] # Add more targets as needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: rapt-mate/package-lock.json

      - name: Install dependencies
        run: |
          cd rapt-mate
          npm ci
          cd ..

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build project
        run: |
          set -e
          . $IDF_PATH/export.sh
          export SDKCONFIG_DEFAULTS=$(pwd)/sdkconfig.defaults
          idf.py reconfigure set-target ${{ matrix.idf_target }} build
      - name: Compress build artifacts
        run: |
          zip -j firmware-${{ matrix.idf_target }}.zip \
          build/bootloader.bin \
          build/partition_table/parition_table.bin \
          build/raptmate.bin \
          build/storage.bin \
          build/data.bin \
          build/flasher_args.json
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.idf_target }}
          path: firmware-${{ matrix.idf_target }}.zip

  deploy:
    needs: build
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload GitHub Pages Artifact
        uses: actions/upload-pages-artifact@v3
        
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  package:
    name: Package all firmware
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Combine firmware artifacts into a single zip
        run: |
          zip -j firmware-release.zip artifacts/

      - name: Upload release asset using GH CLI
        run: |
          gh release upload ${{ github.event.release.tag_name }} firmware-release.zip \
            --clobber \
            --repo ${{ github.repository }}

      - name: Verify upload
        run: |
          gh release view ${{ github.event.release.tag_name }} --json assets --jq '.assets[].name'
