name: ESP-IDF CI/CD

on:
  push:
    branches: [ main, master ]
    tags-ignore: [ '*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  release:
    types: [ created ]

env:
  IDF_VERSION: v5.1.2

permissions:
  pages: write
  id-token: write
  contents: read

jobs:
  build:
    name: Build for ${{ matrix.idf_target }}
    runs-on: ubuntu-latest
    container:
        image: espressif/idf:release-v5.1
    strategy:
        matrix:
            idf_target: [esp32, esp32s2, esp32c3] # Add more targets as needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: rapt-mate/package-lock.json

      - name: Install dependencies
        run: |
            cd rapt-mate
            npm install
            cd ..
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.9'
      - name: Build project
        run: |
            . $IDF_PATH/export.sh
            idf.py set-target ${{ matrix.idf_target }}
            idf.py build
        shell: bash

      - name: Store binary artifacts
        uses: actions/upload-artifact@v4
        with:
            name: firmware-${{ matrix.idf_target }}
            path: |
                build/*.bin
                build/*.elf
                build/*.map
                build/flasher_args.json

      - name: Prepare pages artifact
        if: github.event_name == 'release'
        run: |
            mkdir -p firmware/${{ matrix.idf_target }}
            cp build/*.bin firmware/${{ matrix.idf_target }}/
            echo "# Firmware Build ${{ github.sha }}" > firmware/${{ matrix.idf_target }}/index.md
            echo "Build date: $(date)" >> firmware/${{ matrix.idf_target }}/index.md
            echo "Target: ${{ matrix.idf_target }}" >> firmware/${{ matrix.idf_target }}/index.md

      - name: Upload pages artifact
        if: github.event_name == 'release'
        uses: actions/upload-pages-artifact@v3
        with:
            path: firmware

  deploy:
      name: Deploy to GitHub Pages
      needs: build
      if: github.event_name == 'release' && github.event.action == 'created'
      environment:
          name: github-pages
          url: ${{ steps.deployment.outputs.page_url }}
      runs-on: ubuntu-latest

      steps:
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4